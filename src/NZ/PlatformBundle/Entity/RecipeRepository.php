<?php

namespace NZ\PlatformBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * RecipeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipeRepository extends EntityRepository
{
	  public function getRecipeWithKeyword($keyword)
	  {
		$qb = $this->createQueryBuilder('a');
	
		$qb
		->where('a.name LIKE :keyword')
		->setParameter('keyword','%'.$keyword.'%')
		->orderBy('a.name','ASC')
		;
	
		return $qb->getQuery()->getResult()
		;
	  }
	  public function getRecipeWithKeywordPagined($keyword, $page, $nbPerPage)
	  {
	    $qb = $this->createQueryBuilder('a');
	
	    $qb
	      ->where('a.name LIKE :keyword')
	      ->setParameter('keyword','%'.$keyword.'%')
	      ->orderBy('a.name','ASC')
	    ;

	    $qb
	   	  ->setFirstResult(($page-1) * $nbPerPage)
	  	  ->setMaxResults($nbPerPage)
	  	;

	  	return new Paginator($qb, true);
	  }
	  
	  public function getRecipeWithListIngredient($listIngredient, $page, $nbPerPage)
	  {
	  	$query = $this->_em->createQuery('SELECT a FROM NZPlatformBundle:Recipe a WHERE FIND_SET_EQUALS(a.list_ingredient, :list_ingredient) = 1');
	  	$query->setParameters(array('list_ingredient' => $listIngredient));
	  	
	  	$query
	  	  ->setFirstResult(($page-1) * $nbPerPage)
	  	  ->setMaxResults($nbPerPage)
	  	;

	  	return new Paginator($query, true);	  	
	  }
	  
	  public function getRecipeByUser($user, $page, $nbPerPage)
	  {
	  	$qb = $this->createQueryBuilder('a')
	  	  ->where('a.user = :user')
	  	  ->setParameter('user', $user)
	  	  ->getQuery()
	  	;
	  
	  	$qb
	  	  ->setFirstResult(($page-1) * $nbPerPage)
	  	  ->setMaxResults($nbPerPage)
	  	;

	  	return new Paginator($qb, true);
	  }
}

